package com.tvtodo.api;

import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collector;
import java.util.stream.Collectors;

import org.springframework.http.HttpMethod;
import org.springframework.http.converter.json.GsonBuilderUtils;
import org.springframework.web.client.HttpClientErrorException;
import org.springframework.web.client.RestTemplate;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.tvtodo.jsondeserializer.JsonDeserializerHelper;
import com.tvtodo.models.Cast;
import com.tvtodo.models.Show;
import com.tvtodo.models.ShowWithScore;

import java.lang.reflect.Type;
import com.google.gson.reflect.TypeToken;

public class TvShowAPI implements ITvShowAPI {

	private RestTemplate restTemplate;
	private static TvShowAPI tvSearchAPI = null;
	private static final String url = "http://api.tvmaze.com/";
	private  TvShowAPI() {
		
	}
	
	private  TvShowAPI(RestTemplate restTemplate) {
			this.restTemplate = restTemplate;
	}
	
	public static synchronized TvShowAPI getInstance(RestTemplate restTemplate) {
		if(tvSearchAPI==null){
			tvSearchAPI = new TvShowAPI(restTemplate);
		}
		return tvSearchAPI;
	}
	@Override
	public String searchShowJsonResultByName(String name) {
		String urlString = url+"singlesearch/shows?q="+name;
		String show;
		try {
			show = this.restTemplate.getForObject(urlString, String.class, 200);
		} catch (HttpClientErrorException e) {
			show ="{}";
		}
		return show;
	}
	
	@Override
	public Show searchShowByName(String name){
		String json = this.searchShowJsonResultByName(name);
		Gson gson = new Gson();
		if(json=="{}"){
			return null;
		}
		Show show = gson.fromJson(json, Show.class);
		return show;
	}

	@Override
	public String searchShowsJsonResultByName(String name) {
		String urlString = url+"search/shows?q="+name;
		String shows;
		try {
			shows = this.restTemplate.getForObject(urlString, String.class, 200);
		} catch (HttpClientErrorException e) {
			shows ="[]";
		}
		return shows;
	}

	@Override
	public List<Show> searchShowsByName(String name) {
		String json = this.searchShowsJsonResultByName(name);
		Type listType =new TypeToken<ArrayList<ShowWithScore>>(){}.getType();
		List<ShowWithScore> list = new Gson().fromJson(json, listType);
		return list.stream().map((showWithScore)-> showWithScore.getShow()).collect(Collectors.toList());
	}

	@Override
	public List<Show> getPaginationList(int pnum) {
		String json = this.getPaginationListJsonResult(pnum);
		Type listType = new TypeToken<ArrayList<Show>>(){}.getType();
		List<Show> list = new Gson().fromJson(json, listType);
		return list;
	}

	@Override
	public String getPaginationListJsonResult(int pnum) {
		String urlString = url+"shows?page="+pnum;
		String shows;
		try {
			shows = this.restTemplate.getForObject(urlString, String.class, 200);
		} catch (HttpClientErrorException e) {
			shows ="[]";
		}
		return shows;
	}

	@Override
	public String getCastListJsonResult(int sid) {
		String urlString = url+"shows/"+sid+"cast";
		String casts;
		try {
			casts = this.restTemplate.getForObject(urlString, String.class,200);
		} catch (HttpClientErrorException e) {
			casts="[]";
		}
		return casts;
	}

	@Override
	public List<Cast> getCastList(int sid) {
		String json  = this.getCastListJsonResult(sid);
		 Type list  = new TypeToken<ArrayList<Cast>>(){}.getType();
		 List<Cast> casts = new Gson().fromJson(json, list);
		return casts;
	}
	
	
	
	
}
